<?php

/**
 * @file
 * Install, uninstall and update hooks for Media module.
 */

use Drupal\user\RoleInterface;

/**
 * Implements hook_install().
 */
function media_install() {
  $source = drupal_get_path('module', 'media') . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  $files = file_scan_directory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    // When reinstalling the media module we don't want to copy the icons when
    // they already exist. The icons could be replaced (by a contrib module or
    // manually), so we don't want to replace the existing files. Removing the
    // files when we uninstall could also be a problem if the files are
    // referenced somewhere else. Since showing an error that it was not
    // possible to copy the files is also confusing, we silently do nothing.
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_ERROR);
    }
  }

  // Grant the "view media" permission to all users by default.
  if (\Drupal::moduleHandler()->moduleExists('user')) {
    user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['view media']);
    user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['view media']);
  }
}

/**
 * Implements hook_requirements().
 */
function media_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    $destination = 'public://media-icons/generic';
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $is_writable = is_writable($destination);
    $is_directory = is_dir($destination);
    if (!$is_writable || !$is_directory) {
      if (!$is_directory) {
        $error = t('The directory %directory does not exist.', ['%directory' => $destination]);
      }
      else {
        $error = t('The directory %directory is not writable.', ['%directory' => $destination]);
      }
      $description = t('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually or ensure that the installer has the permissions to create it automatically. For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', [':handbook_url' => 'https://www.drupal.org/server-permissions']);
      if (!empty($error)) {
        $description = $error . ' ' . $description;
        $requirements['media']['description'] = $description;
        $requirements['media']['severity'] = REQUIREMENT_ERROR;
      }
    }

    // Prevent installation if the 1.x branch of the contrib module is enabled.
    if (\Drupal::moduleHandler()->moduleExists('media_entity')) {
      $info = system_get_info('module', 'media_entity');
      if (version_compare($info['version'], '8.x-2') < 0) {
        $requirements['media_module_incompatibility'] = [
          'title' => t('Media'),
          'description' => t('The Media module is not compatible with contrib <a href=":url">Media Entity</a> 1.x branch. Please check the 2.x branch of that module for an upgrade path.', [
            ':url' => 'https://drupal.org/project/media_entity',
          ]),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }
  }

  return $requirements;
}
